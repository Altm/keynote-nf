<html>
<head>
   <title>Toolbar97 Documentation</title>
</head>
<body text="#000000" bgcolor="#ffffff" link="#264b99" vlink="#5e85d7" alink="#7799dd">

<!-- $Id: Toolbar97\040Documentation.htm,v 1.12 2002/05/12 19:37:58 jr Exp $ -->

<font face="verdana,arial" size=2>

<table width="100%" border="0" cellpadding="5" cellspacing="0">
   <tr>
   <td align=center bgcolor="#264b99"><font face="verdana,arial" size="6" color="#FFFFFF"><b>Toolbar97</b></font><br>
<font face="verdana,arial" size="2" color="#FFFFFF"><b>Version 1.78</b><br>
</font></td>
   </tr>
</table>

<p>Copyright &copy; 1998-2002 by Jordan Russell<br>
All rights reserved.

<p><table cellspacing=2 cellpadding=0>
<tr>
   <td><font face="verdana,arial" size=2><i>e-mail:&nbsp;&nbsp;</i></font></td><td><font face="verdana,arial" size=2><a href="mailto:jr@jrsoftware.org?subject=Toolbar97 version 1.78a">jr@jrsoftware.org</a></font></td>
</tr>
<tr>
   <td><font face="verdana,arial" size=2><i>web site:&nbsp;&nbsp;</i></font></td><td><font face="verdana,arial" size=2><a href="http://www.jrsoftware.org/" target=_new>http://www.jrsoftware.org/</a></font></td>
</tr>
<tr>
   <td></td><td><font face="verdana,arial" size=2>(alternate address: <a href="http://www.jordanr.cjb.net/" target=_new>http://www.jordanr.cjb.net/</a>)</font></td>
</tr>
<tr>
   <td></td><td><font face="verdana,arial" size=2><i>Get the latest versions on my web site!</i></font></td>
</tr>
</table>


<h2>Contents</h2>

<ul>
   <li><a href="#overview">Overview</a>
   <li><a href="#license">License</a>
   <li><a href="#register">Registering Toolbar97</a>
   <li><a href="#installation">Installation</a>
   <li><a href="#globals">Global Functions and Variables</a>
   <li><a href="#tdock97">TDock97 Reference</a>
   <li><a href="#ttoolbar97">TToolbar97 Reference</a>
   <li><a href="#ttoolwindow97">TToolWindow97 Reference</a>
   <li><a href="#ttoolbarbutton97">TToolbarButton97 Reference</a>
   <li><a href="#ttoolbarsep97">TToolbarSep97 Reference</a>
   <li><a href="#tedit97">TEdit97 Reference</a>
   <li><a href="#problems">Known Problems and Conflicts</a>
   <li><a href="#tips">Tips</a>
   <li><a href="http://www.jrsoftware.org/tb97faq.php">Frequently Asked Questions</a> (on the web)
   <li><a href="Revision History.htm">Revision History</a>
</ul>


<hr><h2><a name="overview">Overview</a></h2>

<p>Toolbar97 is a shareware dockable toolbar component set for Delphi 2.0-6.0 and C++Builder 1.0-6.0 that features the Office 97 look and behavior. Some of its features include:</p>

<ul>
   <li>Toolbars that can be dragged and docked to any side of a form, or be left floating. Multiple toolbars can lined up side-by-side or in rows.
   <li>All source code for customization if necessary.
   <li>A <i>TToolbarButton97</i> control that looks and works just like the buttons in Office 97.
   <li>A <i>TEdit97</i> control for creating Office 97-style edit controls on toolbars.
   <li>Ability to save and load toolbar positions from the registry.
   <li>Full compatibility with Windows 95, 98, 2000, NT 4.0, and 3.51, without requiring the new COMCTL32.DLL, unlike Delphi's TToolBar and TCoolBar components.
   <li>100% native VCL code -- no bulky OCX's.
</ul>

<p>Note that the successor to Toolbar97, <a href="http://www.jrsoftware.org/tb2k.php" target=_new>Toolbar2000</a>, is now available, and is a free upgrade for currently registered users of Toolbar97.
</p>


<hr><h2><a name="license">License</a></h2>

<p><u>Toolbar97 License Agreement v2.0</u>
<p>
"Author" herein refers to Jordan Russell (the creator of the Toolbar97
components).<br>
"Software" refers to all files and source code included with Toolbar97
(typically extracted from a .zip archive), and all content in them,
regardless of whether any modifications have been made.
<p>
Except where otherwise noted, all of the documentation and Software included
in the Toolbar97 package is copyrighted by Jordan Russell (the Author).
<p>
Copyright (C) 1998-2002 Jordan Russell. All rights reserved.
<p>
This software is provided "as-is," without any express or implied warranty.
In no event shall the author be held liable for any damages arising from the
use of this software.
<p>
Permission is granted for anyone to use this software provided that the
following conditions are met:
<ol>
<li>All redistributions of the Software's files must be in their original,
   unmodified form. Distributions of modified versions of the files is not
   permitted without express written permission of the Author.

<li>All redistributions of the Software's files must retain all copyright
   notices and web site addresses that are currently in place, and must
   include this list of conditions without modification.

<li>None of the Software's files may be redistributed for profit or as part
   of another commercial or shareware software package without express
   written permission of the Author.

<li>You are permitted to Compile the Software into any kind of applications.
   ("Compile" here refers to the automatic process of translating the
   Software's source code into executable Intel x86 machine code by the
   Borland Delphi or C++Builder compilers.)<br>
   However, compilation into commercial or shareware applications, or any
   applications you are profiting from, requires registration (payment) of
   the software.<br>
   For information on registering, see the Toolbar97 Documentation or this
   web page:<br>
   <a href="http://www.jrsoftware.org/tb97reg.php">http://www.jrsoftware.org/tb97reg.php</a>

<li>Redistribution of any of the Software's files in object form (including
   but not limited to .DCU and .OBJ formats) is strictly prohibited without
   express written permission of the Author.

<li>Full backward compatibility in future versions of the Software is not
   guaranteed. In no event shall the Author be held liable for any
   inconvenience or damages arising from lack of backward compatibility.

<li>The Author reserves the right to, at any time, impose additional
   restrictions on how the Software may be used.
</ol>
<p>
If you do not agree to any of these terms, you are not permitted to use the
Software in any way, and all copies of it must be deleted from your
system(s).
</p>


<hr><h2><a name="register">Registering Toolbar97</a></h2>

<p>Commercial usage of Toolbar97 requires registration. Registration entitles you to all future versions of Toolbar97 (including full source code), as well as <a href="http://www.jrsoftware.org/tb2k.php">Toolbar2000</a>, the successor to Toolbar97.</p>

<p>The cost of a single user license is US$35. This license permits development using Toolbar97 by a single person only. A site license costs US$89, which permits development using Toolbar97 by any number of persons at your place of work. But both licenses allow distribution of Toolbar97 (in compiled form) in any type of application - be it commericial, shareware, or freeware.</p>

<p>The quickest and most convenient way to register Toolbar97 is online via credit card. But if you don't have a credit card, or prefer to register offline, there is also a Register program you can download from my site. The Register program allows you to register Toolbar97 using a check, money order, credit card, or cash (many foreign currencies accepted).</p>

<blockquote><a href="http://www.jrsoftware.org/tb97reg.php" target=_new>Click here to register Toolbar97</a></blockquote>


<hr><h2><a name="installation">Installation</a></h2>

<p><b>IMPORTANT:</b> When unzipping Toolbar97, make sure your unzipper is configured to recreate the directory structure (in WinZip, check <i>Use Folder Names</i>).</p>

<p><b>Delphi 2.0/C++Builder 1.0 <i>installation</i>:</b></p>

<ul>
   <li>Select <i>Component | Install...</i> on the menu bar.
   <li>A dialog entitled <i>Install Components</i> will appear. Click the <i>Add...</i> button.
   <li>On the <i>Add Module</i> dialog, click the <i>Browse</i> button, then locate <i>TB97Reg.pas</i>.
</ul>

<p><b>Delphi 2.0/C++Builder 1.0 <i>upgrade</i>:</b></p>

<ul>
   <li>Select <i>Component | Rebuild Library</i> on the menu bar.
</ul>

<p><b>Delphi 3.0 installation / upgrade:</b></p>

<ul>
   <li>Select <i>Tools | Environment Options...</i> on the menu bar. Go to <i>Library</i> tab and add the full path of your Toolbar97 <i>Source</i> directory to the <i>Library Path</i> field if you have not already done so. The <i>Library Path</i> field should then look similar to this:<br><br>
<font face="Courier New">C:\Delphi3\Lib;C:\Delphi3\Bin;C:\Delphi3\Imports;c:\tb97\source</font><br><br>
Click <i>OK</i>.
   <li>Select <i>File | Open...</i> on the menu bar. Set <i>Files of type</i> to <i>Delphi package source</i>, locate and select the <i>TB97_d3</i> package source file in your Toolbar97 <i>Source</i> directory, and click <i>Open</i>.
   <li>A package editor window will appear. Click <i>Compile</i>, then click <i>Install</i>.
</ul>

<p><b>Delphi 4.0 installation / upgrade:</b></p>

<ul>
   <li>Select <i>Tools | Environment Options...</i> on the menu bar. Go to <i>Library</i> tab and add the full path of your Toolbar97 <i>Source</i> directory to the <i>Library Path</i> if you have not already done so. The <i>Library Path</i> field should then look similar to this:<br><br>
<font face="Courier New">$(DELPHI)\Lib;$(DELPHI)\Bin;$(DELPHI)\Imports;c:\tb97\source</font><br><br>
Click <i>OK</i>.
   <li>Select <i>File | Open...</i> on the menu bar. Set <i>Files of type</i> to <i>Delphi package source</i>, locate and select the <i>TB97_d4</i> package source file in your Toolbar97 <i>Source</i> directory, and click <i>Open</i>.
   <li>A package editor window will appear. Click <i>Compile</i>, then click <i>Install</i>.
</ul>

<p><b>Delphi 5.0 installation / upgrade:</b></p>

<ul>
   <li>Select <i>Tools | Environment Options...</i> on the menu bar. Go to <i>Library</i> tab and add the full path of your Toolbar97 <i>Source</i> directory to the <i>Library Path</i> if you have not already done so. The <i>Library Path</i> field should then look similar to this:<br><br>
<font face="Courier New">$(DELPHI)\Lib;$(DELPHI)\Bin;$(DELPHI)\Imports;c:\tb97\source</font><br><br>
Click <i>OK</i>.
   <li>Select <i>File | Open...</i> on the menu bar. Set <i>Files of type</i> to <i>Delphi package source</i>, locate and select the <i>TB97_d5</i> package source file in your Toolbar97 <i>Source</i> directory, and click <i>Open</i>.
   <li>A package editor window will appear. Click <i>Compile</i>, then click <i>Install</i>.
</ul>

<p><b>Delphi 6.0 installation / upgrade:</b></p>

<ul>
   <li>Select <i>Tools | Environment Options...</i> on the menu bar. Go to <i>Library</i> tab and add the full path of your Toolbar97 <i>Source</i> directory to the <i>Library Path</i> if you have not already done so. The <i>Library Path</i> field should then look similar to this:<br><br>
<font face="Courier New">$(DELPHI)\Lib;$(DELPHI)\Bin;$(DELPHI)\Imports;c:\tb97\source</font><br><br>
Click <i>OK</i>.
   <li>Select <i>File | Open...</i> on the menu bar. Set <i>Files of type</i> to <i>Delphi package source</i>, locate and select the <i>TB97_d6</i> package source file in your Toolbar97 <i>Source</i> directory, and click <i>Open</i>.
   <li>A package editor window will appear. Click <i>Compile</i>, then click <i>Install</i>.
</ul>

<p><b>C++Builder 3.0 installation / upgrade:</b></p>

<ul>
   <li>Select <i>Tools | Environment Options...</i> on the menu bar. Go to <i>Library</i> tab and add the full path of your Toolbar97 <i>Source</i> directory to the <i>Library Path</i> field if you have not already done so. The <i>Library Path</i> field should then look similar to this:<br><br>
<font face="Courier New">$(BCB)\LIB;$(BCB)\LIB\OBJ;c:\tb97\source</font><br><br>
Click <i>OK</i>.
   <li>Select <i>File | Open Project...</i> on the menu bar. Locate and select the <i>TB97_cb3</i> package source file in your Toolbar97 <i>Source</i> directory, and click <i>Open</i>.
   <li>Select <i>Project | Make TB97</i> on the menu bar.
   <li>Select <i>File | Close All</i> on the menu bar.
   <li>Select <i>Component | Install Packages...</i> on the menu bar. Click the <i>Add...</i> button, locate the file <i>TB97_cb3.bpl</i> in your Toolbar97 <i>Source</i> directory, and click <i>Open</i>.
   <li>Click <i>OK</i>.
</ul>

<p><b>C++Builder 4.0 installation / upgrade:</b></p>

<ul>
   <li>Select <i>Tools | Environment Options...</i> on the menu bar. Go to <i>Library</i> tab and add the full path of your Toolbar97 <i>Source</i> directory to the <i>Library Path</i> field if you have not already done so. The <i>Library Path</i> field should then look similar to this:<br><br>
<font face="Courier New">$(BCB)\LIB;$(BCB)\LIB\OBJ;c:\tb97\source</font><br><br>
Click <i>OK</i>.
   <li>Select <i>File | Open Project...</i> on the menu bar. Locate and select the <i>TB97_cb4</i> package source file in your Toolbar97 <i>Source</i> directory, and click <i>Open</i>.
   <li>A package editor window will appear. Click <i>Compile</i>, then click <i>Install</i>.
</ul>

<p><b>C++Builder 5.0 installation / upgrade:</b></p>

<ul>
   <li>Select <i>Tools | Environment Options...</i> on the menu bar. Go to <i>Library</i> tab and add the full path of your Toolbar97 <i>Source</i> directory to the <i>Library Path</i> field if you have not already done so. The <i>Library Path</i> field should then look similar to this:<br><br>
<font face="Courier New">$(BCB)\Lib;$(BCB)\Bin;$(BCB)\Imports;$(BCB)\Projects\Bpl;c:\tb97\source</font><br><br>
Click <i>OK</i>.
   <li>Select <i>File | Open Project...</i> on the menu bar. Locate and select the <i>TB97_cb5</i> package source file in your Toolbar97 <i>Source</i> directory, and click <i>Open</i>.
   <li>A package editor window will appear. Click <i>Compile</i>, then click <i>Install</i>.
</ul>

<p><b>C++Builder 6.0 installation / upgrade:</b></p>

<ul>
   <li>Select <i>Tools | Environment Options...</i> on the menu bar. Go to <i>Library</i> tab and add the full path of your Toolbar97 <i>Source</i> directory to the <i>Library Path</i> field if you have not already done so. The <i>Library Path</i> field should then look similar to this:<br><br>
<font face="Courier New">$(BCB)\Lib;$(BCB)\Bin;$(BCB)\Imports;$(BCB)\Projects\Bpl;c:\tb97\source</font><br><br>
Click <i>OK</i>.
   <li>Select <i>File | Open Project...</i> on the menu bar. Locate and select the <i>TB97_cb6</i> package source file in your Toolbar97 <i>Source</i> directory, and click <i>Open</i>.
   <li>A package editor window will appear. Click <i>Compile</i>, then click <i>Install</i>.
</ul>

<p>Once you have Toolbar97 installed, you might want to take a look at the Demo project to see a demonstration of Toolbar97's capabilities.</p>

<p>The Toolbar97 package includes six components: TDock97, TToolbar97, TToolWindow97, TToolbarButton97, TToolbarSep97, and TEdit97. Please read the following sections for important details on each.</p>


<hr><h2><a name="globals">Global Functions and Variables</a></h2>

<h4>TB97.pas</h4>

<p><b>Functions:</b></p>

<ul>
   <li><font face="Courier New">procedure IniLoadToolbarPositions (const Form: TCustomForm; const Filename, SectionNamePrefix: String);</font><br>
Loads the positions of all toolbars owned by Form to the .INI file specified by Filename. This is provided for backwards compatibility - 32-bit applications should use the registry instead. This should be called when your application starts (usually in the OnCreate handler of your form). If they were not previously saved in the .INI file, IniLoadToolbarPositions has no effect. Each toolbar's data is loaded from a section whose name is the <i>Name</i> property of the toolbar prefixed by <i>SectionNamePrefix</i>.
<br><br>
Example:<br>
<font face="Courier New" size=3><pre>procedure TForm1.FormCreate(Sender: TObject);
begin
  IniLoadToolbarPositions (Self, 'test.ini', '');
end;</pre></font>
   <li><font face="Courier New">procedure IniSaveToolbarPositions (const Form: TCustomForm; const Filename, SectionNamePrefix: String);</font><br>
Saves the positions of all toolbars owned by Form to the .INI file specified by Filename. This is provided for backwards compatibility - 32-bit applications should use the registry instead. This should be called when your application exits (usually in the OnDestroy handler of your form). Each toolbar's data is saved to a section whose name is the <i>Name</i> property of the toolbar prefixed by <i>SectionNamePrefix</i>.
Example:<br>
<font face="Courier New" size=3><pre>procedure TForm1.FormDestroy(Sender: TObject);
begin
  IniSaveToolbarPositions (Self, 'test.ini', '');
end;</pre></font>
   <li><font face="Courier New">procedure RegLoadToolbarPositions (const Form: TCustomForm; const BaseRegistryKey: String);</font><br>
Loads the positions of all toolbars owned by Form from the registry. This should be called when your application starts (usually in the OnCreate handler of your form). If they were not previously saved in the registry, RegLoadToolbarPositions has no effect. BaseRegistryKey is the name of the HKEY_CURRENT_USER subkey it loads the data from. RegLoadToolbarPositions will append the Name of the toolbars onto this. For example, if BaseRegistryKey is <i>Software\My Company\My Program\Toolbars</i> and the Name of a toolbar is <i>MyToolbar</i>, it loads the data from the <i>Software\My Company\My Program\Toolbars\MyToolbar</i> key.<br><br>
Example:<br>
<font face="Courier New" size=3><pre>procedure TForm1.FormCreate(Sender: TObject);
begin
  RegLoadToolbarPositions (Self, 'Software\My Company\My Program\Toolbars');
end;</pre></font>
   <li><font face="Courier New">procedure RegLoadToolbarPositionsEx (const Form: TCustomForm; const RootKey: HKEY; const BaseRegistryKey: String);</font><br>
Same as RegLoadToolbarPositions, but adds a RootKey parameter for specifying the root key for BaseRegistryKey.<br><br>
   <li><font face="Courier New">procedure RegSaveToolbarPositions (const Form: TCustomForm; const BaseRegistryKey: String);</font><br>
Saves the positions of all toolbars owned by Form to the registry. This should be called when your application exits (usually in the OnDestroy handler of your form). BaseRegistryKey is the name of the HKEY_CURRENT_USER subkey it saves the data to. RegSaveToolbarPositions will append the Name of the toolbars onto this. For example, if BaseRegistryKey is <i>Software\My Company\My Program\Toolbars</i> and the Name of a toolbar is <i>MyToolbar</i>, it saves the data from the <i>Software\My Company\My Program\Toolbars\MyToolbar</i> key.<br><br>
Example:<br>
<font face="Courier New" size=3><pre>procedure TForm1.FormDestroy(Sender: TObject);
begin
  RegSaveToolbarPositions (Self, 'Software\My Company\My Program\Toolbars');
end;</pre></font>
   <li><font face="Courier New">procedure RegSaveToolbarPositionsEx (const Form: TCustomForm; const RootKey: HKEY; const BaseRegistryKey: String);</font><br>
Same as RegSaveToolbarPositions, but adds a RootKey parameter for specifying the root key for BaseRegistryKey.
</ul>

<h4>TB97Ctls.pas</h4>

<p><b>Variables:</b></p>

<ul>
   <li><font face="Courier New">var ButtonsStayDown: Boolean = True;</font><br>
When True (the default), TToolbarButton97 controls remain down during the execution of their OnClick handlers, similar to Office 97. When False, they pop up immediately like TSpeedButton.
</ul>


<hr><h2><a name="tdock97">TDock97 Reference</a></h2>

<p><b>Description:</b></p>

<p>Create TDock97 controls at locations you want a TToolbar97 to be able to dock at. These automatically resize as toolbars are docked onto them. Be sure to set the Position property to designate which side of the form the dock is to be located.</p>

<p><b>Key Properties:</b></p>

<ul>
   <li><font face="Courier New">property AllowDrag: Boolean default True;</font><br>
When True, toolbars on the dock can be dragged. But when it is False, there are several noteworthy differences: child toolbars are not draggable, the positions of child toolbars are neither loaded nor saved, and toolbars from other docks with AllowDrag set to True cannot be docked to it. Remember you are permitted to create two docks with the same Position, so you could create one dock with AllowDrag set to False and another dock with AllowDrag set to True.
   <li><font face="Courier New">property Background: TBitmap;</font><br>
A background bitmap, which is optional. It is tiled across the length of the dock, and any docked toolbars used it also.
   <li><font face="Courier New">property BackgroundOnToolbars: Boolean default True;</font><br>
When True, the Background bitmap &quot;shines through&quot; onto docked toolbars.
   <li><font face="Courier New">property BackgroundTransparent: Boolean default False;</font><br>
When True, the color of the bottom-left pixel of the Background bitmap is considered transparent, and is replaced by value of the Color property.
   <li><font face="Courier New">property BoundLines: TDockBoundLines;<br>
TDockBoundLines = set of (blTop, blBottom, blLeft, blRight);</font><br>
Use this to add extra lines to the sides of the dock. For docks Positioned at the top of the form, it looks best if you set this to [blTop].
   <li><font face="Courier New">property FixAlign: Boolean default False;</font><br>
If at run-time you notice a dock not appearing in the location it should, enabling this should correct the problem. This problem only occurs when you have a TDock97 and another control with the same Align setting (i.e. a dock and a list view both set to alLeft). When True, this adds an extra pixel to the width or height so that the VCL is able to align it correctly.
   <li><font face="Courier New">property LimitToOneRow: Boolean default False;</font><br>
Set this to True if you want to prevent the user from having more than one row of docked toolbars. I generally don't recommend you enable this (since Office 97 doesn't do this) unless absolutely necessary. If you have fixed-size form that would look wrong with too many rows of toolbars, you should instead respond to the OnResize event of TDock97 to make your form resize itself.
   <li><font face="Courier New">property Position: TDockPosition;<br>
TDockPosition = (dpTop, dpBottom, dpLeft, dpRight);</font><br>
Determines where the dock is located on the form.
   <li><font face="Courier New">property ToolbarCount: Integer;</font><br>
The number of visible toolbars currently docked.
   <li><font face="Courier New">property Toolbars[Index: Integer]: TCustomToolWindow97;</font><br>
Zero-based array of all the visible toolbars that are currently docked.
</ul>

<p><b>Events:</b></p>

<ul>
   <li><font face="Courier New">property OnInsertRemoveBar: TInsertRemoveEvent;<br>
TInsertRemoveEvent = procedure(Sender: TObject; Inserting: Boolean; Bar: TToolbar97) of object;</font><br>
Occurs after a toolbar is docked (Inserting = True) or undocked (Inserting = False).
   <li><font face="Courier New">property OnRequestDock: TRequestDockEvent;<br>
TRequestDockEvent = procedure(Sender: TObject; Bar: TCustomToolWindow97; var Accept: Boolean) of object;</font><br>
Occurs whenever a toolbar is moved over the dock as it is being dragged. By setting Accept to False you can prevent a particular toolbar from being docked.
   <li><font face="Courier New">property OnResize: TNotifyEvent;</font><br>
Occurs whenever the dock is resized.
</ul>

<p><b>Key Methods:</b></p>

<ul>
   <li><font face="Courier New">procedure BeginUpdate;</font><br>
Disables toolbar arrangement. Call this when moving multiple toolbars on a dock to reduce flicker. Once the changes are complete, call EndUpdate.
   <li><font face="Courier New">procedure EndUpdate;</font><br>
Re-enables toolbar arrangement after a call to BeginUpdate.
</ul>


<hr><h2><a name="ttoolbar97">TToolbar97 Reference</a></h2>

<p><b>Description:</b></p>

<p>This is the toolbar control itself. You can insert TToolbarButton97 controls or any other controls on this. All controls in a TToolbar97 are automatically lined up. To create separators, use the TToolbarSep97 component.</p>

<p>At run-time, any new controls created on a TToolbar97 are initially positioned at the end of the toolbar. To change positions of individual controls at run-time, assign to the OrderIndex property.</p>

<p><b>Remarks:</b></p>

<p>When the CloseButton property is True (the default), the toolbar can hide itself if the user clicks the close button on a floating toolbar. Because of this, you should always include an item on a menu that toggles the Visible property so the user can get it back if it is closed. See the demo application source code for an example of this.</p>

<p>Toolbars have to recreate themselves whenever they change from a docked to a floating state and vice versa. Because of this, you may notice that when some types of controls are placed on a toolbar (like TComboBoxes), they don't properly handle this situation (due to bugs) and lose some of their values when docking or undocking occurs. If you notice this happening, you need to respond to the OnRecreating and OnRecreated events. Put code in the OnRecreating event that saves the state of the controls in the toolbar, and put code in the OnRecreated event that restores the state. For example, if you had a TComboBox dropdown list, you could make it save its ItemIndex value into a temporary variable in OnRecreating. OnRecreated could then restore the ItemIndex value from the temporary variable.</p>

<p><b>Key Properties:</b></p>

<ul>
   <li><font face="Courier New">property ActivateParent: Boolean default True;</font><br>
Determines whether the parent form is activated when a floating toolbar is clicked.
   <li><font face="Courier New">property BorderStyle: TBorderStyle default bsSingle;</font><br>
When set to bsSingle, the toolbar has a 3-D border.
   <li><font face="Courier New">property Caption;</font><br>
What appears in the title bar of a floating toolbar.
   <li><font face="Courier New">property CloseButton: Boolean default True;</font><br>
When True, a close button appears in the title bar when the toolbar is floating.
   <li><font face="Courier New">property CloseButtonWhenDocked: Boolean default False;</font><br>
When True, a close button is displayed when the toolbar is docked.
   <li><font face="Courier New">property DefaultDock: TDock97;</font><br>
(Note: The <i>LastDock</i> property is meant to supersede this property.)<br>The default dock location. This is used when the user double-clicks a floating toolbar. If neither this property nor <i>LastDock</i> are set, nothing will happen.
   <li><font face="Courier New">property DockableTo: TDockableTo default [dpTop, dpBottom, dpLeft, dpRight];<br>
TDockableTo = set of (dpTop, dpBottom, dpLeft, dpRight);</font><br>
Specifies which positions the toolbar may be docked at.
   <li><font face="Courier New">property DockedTo: TDock97;</font><br>
The TDock97 control that the toolbar is currently docked to. You can assign to this value any TDock97 control that belongs to the same form as the toolbar. To undock a toolbar at design time, delete the value from this property. To undock a toolbar at run time, assign <i>nil</i> to this property.
   <li><font face="Courier New">property DockMode: TToolWindowDockMode;<br>
TToolWindowDockMode = (dmCanFloat, dmCannotFloat, dmCannotFloatOrChangeDocks);</font><br>
Determines where the user can drag the toolbar. If this is <i>dmCanFloat</i>, the default, the toolbar can float or dock to any dock matching the criteria set by <i>DockableTo</i>. If this is <i>dmCannotFloat</i>, the toolbar can dock to the same docks but it cannot float. If the user moves the mouse outside a dock, the "Unavailable" mouse cursor is displayed. Also, the toolbar does not respond to double-clicks. If this is <i>dmCannotFloatOrChangeDocks</i>, the user cannot drag the toolbar anywhere outside its current dock.
   <li><font face="Courier New">property DockPos: Integer;</font><br>
This is only valid if the toolbar is currently docked (DockedTo &lt;&gt; nil). This is its current horizontal (or vertical, if docked to a left or right dock) position in pixels.
   <li><font face="Courier New">property DockRow: Integer;</font><br>
This is only valid if the toolbar is currently docked (DockedTo &lt;&gt; nil). This is the row the toolbar is currently docked at.
   <li><font face="Courier New">property DragHandleStyle: TDragHandleStyle default dhDouble;<br>
TDragHandleStyle = (dhDouble, dhNone, dhSingle);</font><br>
Determines the type of drag handle displayed on the left (or top, when docked vertically) of the toolbar.
   <li><font face="Courier New">property FloatingMode: TToolWindowFloatingMode;<br>
TToolWindowFloatingMode = (fmOnTopOfParentForm, fmOnTopOfAllForms);</font><br>
By default, this is set to <i>fmOnTopOfParentForm</i>, meaning when floating the toolbar only stays on top of its parent form. If this is set to <i>fmOnTopOfAllForms</i>, the toolbar will stay above all other forms in the project (except those that are also set to stay on top).
   <li><font face="Courier New">property FullSize: Boolean default False;</font><br>
When True, the toolbar always fills the entire width (or height, if vertically docked) of the dock, much like Office 97's menu bar.
   <li><font face="Courier New">property HideWhenInactive: Boolean default True;</font><br>
When True, the toolbar is hidden whenever the application is deactivated (a characteristic of Office 97's toolbars).
   <li><font face="Courier New">property LastDock: TDock97;</font><br>
The TDock97 control that the toolbar was last docked to, or if the toolbar is currently docked, this is equal to the <i>DockedTo</i> property. Double-clicking a floating toolbar will restore it back to the dock specified by this property, and at the same position it previously was docked at. This property overrides and is meant to be a replacement for <i>DefaultDock</i>. If you want to disable the use of this property, set <i>UseLastDock</i> to False.
   <li><font face="Courier New">property OrderedControls[Index: Integer]: TControl;</font><br>
<i>Run-time only.</i> OrderedControls works just like the standard Controls property (see Delphi/C++Builder help), except the controls it returns are in the order they appear on the toolbar.
   <li><font face="Courier New">property OrderIndex[Control: TControl]: Integer;</font><br>
<i>Run-time only.</i> The OrderIndex property holds the position of each control on the toolbar. Use this property to change the position of a control on a toolbar at run-time. (Note that Toolbar97's loading/saving functions do not save this property.) The first control has an OrderIndex value of zero. Much like the way Delphi's TabOrder property works, assigning to one control's OrderIndex automatically shifts other controls' OrderIndexes back or forward. Following are some examples:
<font face="Courier New" size=3><pre>// Move a button to the left of the toolbar
Toolbar971.OrderIndex[ToolbarButton971] := 0;

// Move another button to the right of the toolbar
Toolbar971.OrderIndex[ToolbarButton972] := Maxint;</pre></font>
   <li><font face="Courier New">property ShowCaption: Boolean default True;</font><br>
When True, the toolbar displays a caption bar and a close button (if <i>CloseButton</i> is True) when floating.
   <li><font face="Courier New">property UseLastDock: Boolean default True;</font><br>
When True, the toolbar saves the last dock it was docked to in the property <i>LastDock</i>, and internally preserves the position it was docked at. See the description of <i>LastDock</i> for more information.
</ul>

<p><b>Events:</b></p>

<ul>
   <li><font face="Courier New">property OnClose: TNotifyEvent;</font><br>
Occurs after the toolbar is hidden in response to the user clicking the toolbar's Close button.
   <li><font face="Courier New">property OnCloseQuery: TCloseQueryEvent;<br>
TCloseQueryEvent = procedure(Sender: TObject; var CanClose: Boolean) of object;</font><br>
Same in function as a form's OnCloseQuery event. Setting <i>CanClose</i> to False will cancel the requested close operation.
   <li><font face="Courier New">property OnDockChanged: TNotifyEvent;</font><br>
Occurs after the toolbar has changed between docks, or from a docked to floating state or vice versa.
   <li><font face="Courier New">property OnDockChanging: TNotifyEvent;</font><br>
Occurs immediately before the toolbar changes between docks, or from a docked to floating state or vice versa.
   <li><font face="Courier New">property OnDockChangingEx: TDockChangingExEvent;<br>
TDockChangingExEvent = procedure(Sender: TObject; DockingTo: TDock97) of object;</font><br>
Same as the OnDockChanging event, but has an extra parameter DockingTo that specifies where the toolbar is about to dock to.
   <li><font face="Courier New">property OnDockChangingHidden: TDockChangingExEvent;<br>
TDockChangingExEvent = procedure(Sender: TObject; DockingTo: TDock97) of object;</font><br>
Similar to the OnDockChangingEx event, but this event is called after the toolbar has already been hidden from the screen in preparation to be moved to another dock. This can be useful if, for example, you want to make changes in the ordering of the toolbar's controls whenever it moves between docks, but don't want any visible flickering during this time.
   <li><font face="Courier New">property OnRecreated: TNotifyEvent;</font><br>
Occurs immediately after the toolbar recreates itself. This usually happens when it changes between a docked and non-docked state. See the <i>Remarks</i> above for more information.
   <li><font face="Courier New">property OnRecreating: TNotifyEvent;</font><br>
Occurs immediately before the toolbar recreates itself. This usually happens when it changes between a docked and non-docked state. See the <i>Remarks</i> above for more information.
   <li><font face="Courier New">property OnResize: TNotifyEvent;</font><br>
Occurs after the toolbar's size changes. Note that this event is fired after any size change, not only when the user resizes a floating toolbar.
   <li><font face="Courier New">property OnVisibleChanged: TNotifyEvent;</font><br>
Occurs after the toolbar's visibility changes. This event will occur if the application manually changes the visibility of the toolbar (e.g., by toggling the <i>Visible</i> property), or if the user closes the toolbar using its Close button.
</ul>

<p><b>Key Methods:</b></p>

<ul>
   <li><font face="Courier New">procedure AddDockForm (const Form: TCustomForm);</font><br>
Adds a form to the list of forms that the toolbar can be docked to besides the current parent's parent form. Keep in mind that moving a toolbar to another form does not change its Owner property; therefore it will still be destroyed when its owner component is destroyed. To change a toolbar's owner, use TComponent's RemoveComponent and InsertComponent methods.
   <li><font face="Courier New">procedure BeginMoving (const InitX, InitY: Integer);<br>
TToolWindowSizeHandle = (twshLeft, twshRight, twshTop, twshTopLeft, twshTopRight, twshBottom, twshBottomLeft, twshBottomRight);</font><br>
Forces the toolbar to enter "move" mode. This is called internally whenever the user clicks the drag handle of a docked toolbar or the caption bar of a floating toolbar, and will only work properly if it is called while the left mouse button is still down. The <i>InitX</i> and <i>InitY</i> parameters specify the client coordinates where the mouse button went down at, which determine where the dragging rectangle appears initially. In most cases (0, 0) should be fine.
   <li><font face="Courier New">procedure BeginSizing (const ASizeHandle: TToolWindowSizeHandle);<br>
TToolWindowSizeHandle = (twshLeft, twshRight, twshTop, twshTopLeft, twshTopRight, twshBottom, twshBottomLeft, twshBottomRight);</font><br>
Forces the toolbar to enter "size" mode. This is called internally whenever the user clicks one of the resizing handles on the border of a floating toolbar, and will only work properly if it is called while the left mouse button is still down. The <i>ASizeHandle</i> parameter specifies which resizing handle was clicked.
   <li><font face="Courier New">procedure BeginUpdate;</font><br>
Disables arrangement of controls on the toolbar. Call this when moving multiple controls on the toolbar to reduce flicker. Once the changes are complete, call EndUpdate.
   <li><font face="Courier New">procedure EndUpdate;</font><br>
Re-enables control arrangement after a call to BeginUpdate.
   <li><font face="Courier New">procedure RemoveDockForm (const Form: TCustomForm);</font><br>
Removes a form from the list of forms AddDockForm adds to.
   <li><font face="Courier New">procedure SetSlaveControl (const ATopBottom, ALeftRight: TControl);</font><br>
Call this when the form is created to designate a top/bottom docked and left/right docked version of a control on the toolbar. At design time, create both versions side-by-side (with no separator in between). Alternatively, you can specify <i>nil</i> for one of the parameters to have no left/right or top/bottom docked version.<br>
See the demo application source code for an example of how to use this.
</ul>


<hr><h2><a name="ttoolwindow97">TToolWindow97 Reference</a></h2>

<p><b>Description:</b></p>

<p>This component is very similar to TToolbar97, but has two key differences: contained controls are not arranged automatically, and floating tool windows may be resized freely.</p>

<p>See the help for the TToolbar97 component for explanations of the properties and events not listed here.</p>

<p><b>Key Properties:</b></p>

<ul>
   <li><font face="Courier New">procedure MinClientHeight: Integer default 32;</font><br>
The minimum height, in client pixels, that the tool window can be resized to.
   <li><font face="Courier New">procedure MinClientWidth: Integer default 32;</font><br>
The minimum width, in client pixels, that the tool window can be resized to.
   <li><font face="Courier New">procedure Resizable: Boolean default True;</font><br>
When True, the user may resize the tool window when floating.
</ul>


<hr><h2><a name="ttoolbarbutton97">TToolbarButton97 Reference</a></h2>

<p><b>Description:</b></p>

<p>The TToolbarButton97 component is similar to Delphi 3's TSpeedButton component, but it works more like Office 97 and adds some new features. You aren't required to use this for the buttons on toolbar, but it's recommended that you do so.</p>

<p>If you want your application to look just like Office 97, you should leave the width of buttons at 23 pixels and the height at 22 pixels (when viewed in small fonts). Glyphs should be 16x16 pixels (or 17x17 for some disabled glyphs).</p>

<p>See the help for Delphi's TSpeedButton component for explanations of the properties, methods, and events not listed here.</p>

<p><b>Key Properties:</b></p>

<ul>
   <li><font face="Courier New">property Action;</font><br>
<i>Delphi 4 only.</i> Specifies an action to associate with the button. The Images property of TToolbarButton97 is not automatically synchronized with the action list's Images property.
   <li><font face="Courier New">property Alignment: TAlignment default taCenter;<br>
TAlignment = (taLeftJustify, taRightJustify, taCenter);</font><br>
Specifies the alignment to use when drawing multiple lines of text when WordWrap is set to True. This has no effect on buttons with only a single line of text.
   <li><font face="Courier New">property CallDormant: Boolean default True;</font><br>
<i>Run-time only.</i> When True, TToolbarButton97 calls Dormant on the Glyph TBitmap, which greatly reduces GDI resource consumption. The only downside to having CallDormant set to True is that if the bitmap assigned to Glyph was a DDB, it will be converted to a DIB.
   <li><font face="Courier New">property DisplayMode: TButtonDisplayMode default dmBoth;<br>
TButtonDisplayMode = (dmBoth, dmGlyphOnly, dmTextOnly);</font><br>
Determines whether the glyph, caption, or both are drawn on the button. You could adjust this if you wanted to, for example, hide glyphs without deleting them.
   <li><font face="Courier New">property DropdownAlways: Boolean default False;</font><br>
When True, the button always functions in "dropdown mode," regardless of whether the DropdownMenu property has a menu assigned. This can be useful for implementing your own dropdown functionality using the OnDropdown event.
   <li><font face="Courier New">property DropdownArrow: Boolean default True;</font><br>
When True, the button displays an arrow if DropdownMenu is assigned.
   <li><font face="Courier New">property DropdownArrowWidth: Integer default 9;</font><br>
Specifies the amount of pixels to reserve for the dropdown arrow. (This doesn't affect the size of the actual arrow.) Typically, this property will only be changed if <i>DropdownCombo</i> is set to True.
   <li><font face="Courier New">property DropdownCombo: Boolean default False;</font><br>
When True, the button is split into two parts, like the Undo and Redo buttons in Office 97. Clicking the left side of the button generates an OnClick event, and clicking the right side displays the popup menu specified by DropdownMenu. <i>Note:</i> The extra two pixels on the right side are there intentionally because Office 97 has them, and it provides better separation when you have several DropdownCombo-style buttons in a row.
   <li><font face="Courier New">property DropdownMenu: TPopupMenu;</font><br>
When this is assigned, the button will display this popup menu instead of calling the OnClick handler when clicked. The menu appears below the button, or to the right if the parent toolbar is docked to the left or right side.
   <li><font face="Courier New">property Flat: Boolean default True;</font><br>
When True, the button has the Office 97 appearance.
   <li><font face="Courier New">property Glyph: TBitmap;</font><br>
Same as TSpeedButton's Glyph property, except it supports a fifth glyph which is used when the mouse is over the button.
   <li><font face="Courier New">property GlyphMask: TBitmap;</font><br>
This is a special-purpose property. Assigning a bitmap to this property is optional. When one is assigned, TToolbarButton97 uses it as the transparent mask, instead of generating its own based on the value of Glyph's bottom-left pixel. The mask bitmap should contain only black and white colors. This property can be useful when you have a need to display an icon (meaning a TIcon or HICON) as a glyph on a button. Assign its XOR bitmap to Glyph, and its AND bitmap to GlyphMask.
   <li><font face="Courier New">property HighlightWhenDown: Boolean default True;</font><br>
When False, the dithered pattern will not be shown when the button's <i>Down</i> property is True.
   <li><font face="Courier New">property ModalResult: TModalResult default mrNone;</font><br>
Just like TButton's ModalResult property.
   <li><font face="Courier New">property ImageIndex: Integer default -1;</font><br>
The particular image to use from the image list specified by the Images property.
   <li><font face="Courier New">property Images: TCustomImageList;</font><br>
This property specifies an optional image list to use for glyphs. When an image list is assigned to this property, it overrides the Glyph/GlyphMask properties.
   <li><font face="Courier New">property NoBorder: Boolean default False;</font><br>
When True, the button never displays a border (regardless of the Flat property's setting).
   <li><font face="Courier New">property NumGlyphs: TNumGlyphs97;<br>
TNumGlyphs97 = 1..5;</font><br>
Same as TSpeedButton's NumGlyphs property, except it supports a fifth glyph which is used when the mouse is over the button.
   <li><font face="Courier New">property OldDisabledStyle: Boolean default False;</font><br>
When True, the generated disabled glyphs look like TSpeedButton and earlier versions of  TToolbarButton97. When False, they use the Office 97 look.
   <li><font face="Courier New">property Opaque: Boolean default True;</font><br>
When True, the button is not transparent, which prevents the &quot;blinking&quot; effect that you see when you move the mouse over it or click it (as seen in Delphi 3's TSpeedButton, and most other button components). You should only need to set this to False if you have a Background for the dock.
   <li><font face="Courier New">property Repeating: Boolean default False;</font><br>
When True, OnClick events are periodically fired while the mouse button is down on the button, using the interval specified by RepeatInterval, and an initial delay specified by RepeatDelay.
   <li><font face="Courier New">property RepeatDelay: Integer default 400;</font><br>
The initial delay, in milliseconds, before OnClick events are fired at the rate specified by RepeatInterval. Only applicable when Repeating is True.
   <li><font face="Courier New">property RepeatInterval: Integer default 100;</font><br>
The interval, in milliseconds, at which OnClick events are fired after the initial delay specified by RepeatDelay has expired. Only applicable when Repeating is True.
   <li><font face="Courier New">property ShowBorderWhenInactive: Boolean default False;</font><br>
When True, button borders are shown even when the application is inactive (applies to flat buttons only).
   <li><font face="Courier New">property WordWrap: Boolean default False;</font><br>
When True, text that is too wide for the button is wrapped into several lines.
</ul>

<p><b>Key Events:</b></p>

<ul>
   <li><font face="Courier New">property OnDropdown: TButtonDropdownEvent;<br>
TButtonDropdownEvent = procedure(Sender: TObject; var ShowMenu, RemoveClicks: Boolean) of object;</font><br>
Occurs before the button's dropdown menu is about to be displayed, or if DropdownAlways is True, when the left button is pressed over the button.<br>
If a menu is assigned to the DropdownMenu property, the ShowMenu parameter will be True when the event handler is called. Setting ShowMenu to False will cause it to not show the dropdown menu after the event handler returns.<br>
The RemoveClicks parameter is always initially True. Normally TToolbarButton97 removes from the message queue additional clicks on the button while the dropdown menu is displayed. This is so clicking on the button and clicking it again will close the dropdown menu and not display it again. Setting RemoveClicks to False will prevent this.
   <li><font face="Courier New">property OnMouseEnter: TNotifyEvent;</font><br>
Occurs when the mouse cursor moves inside the button.
   <li><font face="Courier New">property OnMouseExit: TNotifyEvent;</font><br>
Occurs when the mouse cursor leaves the button.
</ul>


<hr><h2><a name="ttoolbarsep97">TToolbarSep97 Reference</a></h2>

<p><b>Description:</b></p>

<p>The TToolbarSep97 component is used to create separators between toolbar buttons. It automatically adjusts its size and orientation at design and run time. At run time, it also adjusts its visibility when necessary.</p>

<p><b>Key Properties:</b></p>

<ul>
   <li><font face="Courier New">property Blank: Boolean default False;</font><br>
When True, the separator does not have a beveled appearance.
   <li><font face="Courier New">property SizeHorz: Integer default 6;</font><br>
The width of the separator when the parent toolbar is docked to the top or bottom.
   <li><font face="Courier New">property SizeVert: Integer default 6;</font><br>
The height of the separator when the parent toolbar is docked to the left or right.
</ul>


<hr><h2><a name="tedit97">TEdit97 Reference</a></h2>

<p><b>Description:</b></p>

<p>The TEdit97 component is identical to Delphi's TEdit component, except it has the Office 97 appearance, and is missing a few properties that are not applicable.</p>


<hr><h2><a name="problems">Known Problems and Conflicts</a></h2>

<p><b><i>Problem:</i></b><br>
I have a combo box on my toolbar, and whenever I dock or undock the toolbar the combo box's ItemIndex property is reset.<br>
<b><i>Solution:</i></b><br>
This is a bug in the VCL (affecting Delphi/C++Builder versions prior to 4.0), not Toolbar97. Please read the <i>Remarks</i> section of the <a href="#ttoolbar97">TToolbar97 reference</a> for information on how to work around this.</p>

<p><b><i>Problem:</i></b><br>
I have my docks at the edges of the form, but for some reason toolbars are docking in unexpected places, such as the middle of the form.<br>
<b><i>Solution:</i></b><br>
This is due to the design of the VCL, and usually happens if you have multiple controls with the same Align setting. Try setting the FixAlign property for the docks exhibiting this problem.</p>

<p><b><i>Problem:</i></b><br>
My RichEdit component is now limiting itself to 64KB after adding a toolbar to my form.<br>
<b><i>Solution:</i></b><br>
This problem exists in Windows 95 and 98 (not NT/2000). The bug is not in TCustomToolWindow97, but TCustomToolWindow97 does cause this to start happening by its use of a WH_CALLWNDPROC hook. On 95/98, rich-edit controls start misbehaving if a WH_CALLWNDPROC hook of any kind is installed. Unfortunately there is not much that can be done about this problem, since TCustomToolWindow97 needs to use a hook in certain places for it to work properly, and even the latest RICHED32.DLL still has this problem. One option is to use a rich-edit component based on RICHED20.DLL, which does not exhibit this problem, and is Microsoft's current recommendation. (For one such component, try searching for <i>riched98</i> or <i>richedit98</i> on the <a href="http://sunsite.icm.edu.pl/delphi/" target=_new>Delphi Super Page</a>. I'm also told that <a href="http://www.rxlib.com/" target=_new>RxLib</a> contains a Rich Edit 2.0 component.)</p>

<p><b><i>Problem:</i></b><br>
UpDown controls on TToolbar97's conflict with TToolbar97's automatic control arrangement when their Associate property is assigned.<br>
<b><i>Solution:</i></b><br>
Manually synchronize the UpDown control and its buddy window instead of using the Associate property.</p>


<hr><h2><a name="tips">Tips</a></h2>

<ul>
   <li>When using the same background on several docks, it is more efficient to assign the background bitmap to one at design time, and copy it to the rest using code at run time. For example:
<font face="Courier New" size=3><pre>
BottomDock.Background.Assign (TopDock.Background);
LeftDock.Background.Assign (TopDock.Background);
RightDock.Background.Assign (TopDock.Background);
</pre></font>
This way you don't wind up with a larger EXE caused by duplicates of the same bitmap.<br><br>
   <li>To quickly change the DisplayMode of all buttons on a TToolbar97, use code like this:
<font face="Courier New" size=3><pre>var
  I: Integer;
begin
  Toolbar971.BeginUpdate;
  try
    for I := 0 to Toolbar971.ControlCount-1 do
      if Toolbar971.Controls[I] is TToolbarButton97 then
        with TToolbarButton97(Toolbar971.Controls[I]) do begin
          DisplayMode := ...;
          Width := ...;
          Height := ...;
        end;
  finally
    Toolbar971.EndUpdate;
  end;
end;</pre></font>
   <li>Be warned: The TTreeView components in Delphi versions 2.0-3.02 and C++Builder 1.0 have a memory leak bug. Whenever a toolbar containing a TTreeView is docked or undocked, memory is leaked. More specificially, a TTreeView leaks memory whenever its handle gets &quot;recreated.&quot; The amount of memory leaked can range from a few bytes to several thousand bytes, depending on the number of nodes. Delphi 4.0 and C++Builder 3.0 fix this bug.
</ul>

</font>

</body>
</html>